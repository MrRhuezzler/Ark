<html>

<head>


<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Move Table move generation</title>
<link rel="stylesheet" type="text/css" href="../../styles.css">
<meta name="Microsoft Theme" content="zero-plus-one 110, default">
<meta name="Microsoft Border" content="tlb, default">
</head>

<body bgcolor="#000000" text="#FFFFFF" link="#FFCC00" vlink="#CCCC7F" alink="#FF3300"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="Arial, Arial, Helvetica">

<p align="left">
<script language="JavaScript"><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// --></script><script language="JavaScript"><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload("../../_derived/back_cmp_zero-plus-one110_back.gif"); MSFPnav1h=MSFPpreload("../../_derived/back_cmp_zero-plus-one110_back_a.gif"); }
// --></script><a href="0x88.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1h.src" onmouseout="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1n.src"><img src="../../_derived/back_cmp_zero-plus-one110_back.gif" width="100" height="20" border="0" alt="Back" align="middle" name="MSFPnav1"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload("../../_derived/up_cmp_zero-plus-one110_up.gif"); MSFPnav2h=MSFPpreload("../../_derived/up_cmp_zero-plus-one110_up_a.gif"); }
// --></script><a href="index.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2h.src" onmouseout="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2n.src"><img src="../../_derived/up_cmp_zero-plus-one110_up.gif" width="100" height="20" border="0" alt="Up" align="middle" name="MSFPnav2"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload("../../_derived/next_cmp_zero-plus-one110_next.gif"); MSFPnav3h=MSFPpreload("../../_derived/next_cmp_zero-plus-one110_next_a.gif"); }
// --></script><a href="pondering.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3h.src" onmouseout="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3n.src"><img src="../../_derived/next_cmp_zero-plus-one110_next.gif" width="100" height="20" border="0" alt="Next" align="middle" name="MSFPnav3"></a></p>

<p align="left"><font size="6"><strong>
<img src="_derived/movetable.htm_cmp_zero-plus-one110_bnr.gif" width="575" height="60" border="0" alt="Move Table move generation"></strong></font></p>

<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%"><!--mstheme--><font face="Arial, Arial, Helvetica">

<p>

</p>

<!--mstheme--></font></td><td valign="top" width="24"></td><!--msnavigation--><td valign="top"><!--mstheme--><font face="Arial, Arial, Helvetica">

<p>I don't know where this came from originally, but I know that GnuChess has 
used this method for many years.</p>
<p>The GnuChess implementation involves two &quot;threads&quot; associated with each type 
of piece located on each square.&nbsp; All of the stuff in the threads is 
pre-computed, so you just wade through pre-digested stuff and spit moves out.</p>
<p>I would make this a little heavier by using an array of elements, each of 
which contains a pointer to a square on the board, and another pointer to an 
element within the same array.</p>
<p>If there is a bishop on d5, somehow associated with this bishop is a pointer 
to a list that corresponds to the list of pre-computed legal moves for a bishop 
on d5.</p>
<p>To generate moves, you look at the first element in the list.&nbsp; The 
element will contain a pointer to a square on the board.&nbsp; If the square is 
empty, you generate a move, then go to the next element.&nbsp; If the square is 
not empty, you generate a move if the occupier is an enemy piece, then you 
follow the &quot;blocked&quot; pointer and resume processing there.</p>
<p>My description is a little confusing, but here's how this could work in 
practice for a bishop on d5:</p>
<p class="c-code">typedef struct tagMT {</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp; square;</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; struct tagMT * pmtBlocked;</p>
<p class="c-code">} MT;</p>
<p class="c-code">&nbsp;</p>
<p class="c-code">MT argmtBD5[] = {</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; e6,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[3], // 
Element 0, 1st ray.</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; d7,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[3],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; f8,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[3],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; c6,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[3], // 
Element 3, 2nd ray.</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; b7,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[6],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; a8,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[6],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; e4,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[6], // 
Element 6, 3rd ray.</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; f3,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[6],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; g2,&nbsp;&nbsp;&nbsp; &amp;argmtBD5[6],</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; h1,&nbsp;&nbsp;&nbsp; NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// Element 9, 4th ray.</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; c4,&nbsp;&nbsp;&nbsp; NULL,</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; b3,&nbsp;&nbsp;&nbsp; NULL,</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; a2,&nbsp;&nbsp;&nbsp; NULL,</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; -1,</p>
<p class="c-code">};</p>
<p class="c-code">&nbsp;</p>
<p class="c-code">void GenMoves(MT * pmt)</p>
<p class="c-code">{</p>
<p class="c-code">&nbsp;&nbsp;&nbsp; for (;;)</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IsEmpty(pmt-&gt;square)) 
{</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
GenMove(pmt-&gt;square);</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
if ((++pmt)-&gt;square &lt; 0)</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
break;</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
if (IsEnemy(pmt-&gt;square))</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
GenMove(pmt-&gt;square);</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
if ((pmt = pmt-&gt;pmtBlocked) == NULL)</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
break;</p>
<p class="c-code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p class="c-code">}</p>
<p>There is not a lot to this.&nbsp; You end up doing a lot of memory accesses, 
and there are special cases for pawns and castling and all that, but you can add 
more fields to the move table element in order to do all kinds of neat things, 
and the code is not that complex.</p>
<p>This mechanism also combines well with other techniques such as the history 
heuristic -- you can store your history value in the table and not have to index 
into a big array -- and zobrist hashing -- you can store the source and 
destination keys already XOR'd together in the move table element.&nbsp; The 
possibilities are endless and you can end up consuming huge amounts of memory.</p>
<p>I don't know how this compares performance-wise to other techniques.&nbsp; 
You don't get some of the stuff you get for free with 0x88, and you don't get 
some of the stuff you get for free with bitboards, but neither of those 
techniques give you some of the stuff you get for free with this.</p>

<!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="Arial, Arial, Helvetica">



<h5><!--mstheme--><font color="#FF9900">&nbsp;<!--mstheme--></font></h5>



<h5><!--mstheme--><font color="#FF9900">Send mail to <a href="mailto:brucemo@seanet.com">
brucemo@seanet.com</a> with
questions or comments about this web site.<br>


Copyright © 2001 Bruce Moreland<br>


Last modified: 
12/27/02 <!--mstheme--></font></h5>

<!--mstheme--></font></td></tr><!--msnavigation--></table></body>


<!-- SOME LINK HREF'S ON THIS PAGE HAVE BEEN REWRITTEN BY THE WAYBACK MACHINE
OF THE INTERNET ARCHIVE IN ORDER TO PRESERVE THE TEMPORAL INTEGRITY OF THE SESSION. -->




</html>